// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/14/2024 10:04:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Semaforo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Semaforo_vlg_sample_tst(
	alarma,
	clk1,
	clk2,
	enable,
	sampler_tx
);
input  alarma;
input  clk1;
input  clk2;
input  enable;
output sampler_tx;

reg sample;
time current_time;
always @(alarma or clk1 or clk2 or enable)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Semaforo_vlg_check_tst (
	rojo,
	talfin,
	verde,
	sampler_rx
);
input  rojo;
input  talfin;
input  verde;
input sampler_rx;

reg  rojo_expected;
reg  talfin_expected;
reg  verde_expected;

reg  rojo_prev;
reg  talfin_prev;
reg  verde_prev;

reg  rojo_expected_prev;
reg  talfin_expected_prev;
reg  verde_expected_prev;

reg  last_rojo_exp;
reg  last_talfin_exp;
reg  last_verde_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	rojo_prev = rojo;
	talfin_prev = talfin;
	verde_prev = verde;
end

// update expected /o prevs

always @(trigger)
begin
	rojo_expected_prev = rojo_expected;
	talfin_expected_prev = talfin_expected;
	verde_expected_prev = verde_expected;
end



// expected rojo
initial
begin
	rojo_expected = 1'bX;
end 

// expected talfin
initial
begin
	talfin_expected = 1'bX;
end 

// expected verde
initial
begin
	verde_expected = 1'bX;
end 
// generate trigger
always @(rojo_expected or rojo or talfin_expected or talfin or verde_expected or verde)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected rojo = %b | expected talfin = %b | expected verde = %b | ",rojo_expected_prev,talfin_expected_prev,verde_expected_prev);
	$display("| real rojo = %b | real talfin = %b | real verde = %b | ",rojo_prev,talfin_prev,verde_prev);
`endif
	if (
		( rojo_expected_prev !== 1'bx ) && ( rojo_prev !== rojo_expected_prev )
		&& ((rojo_expected_prev !== last_rojo_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rojo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rojo_expected_prev);
		$display ("     Real value = %b", rojo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rojo_exp = rojo_expected_prev;
	end
	if (
		( talfin_expected_prev !== 1'bx ) && ( talfin_prev !== talfin_expected_prev )
		&& ((talfin_expected_prev !== last_talfin_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port talfin :: @time = %t",  $realtime);
		$display ("     Expected value = %b", talfin_expected_prev);
		$display ("     Real value = %b", talfin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_talfin_exp = talfin_expected_prev;
	end
	if (
		( verde_expected_prev !== 1'bx ) && ( verde_prev !== verde_expected_prev )
		&& ((verde_expected_prev !== last_verde_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port verde :: @time = %t",  $realtime);
		$display ("     Expected value = %b", verde_expected_prev);
		$display ("     Real value = %b", verde_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_verde_exp = verde_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Semaforo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg alarma;
reg clk1;
reg clk2;
reg enable;
// wires                                               
wire rojo;
wire talfin;
wire verde;

wire sampler;                             

// assign statements (if any)                          
Semaforo i1 (
// port map - connection between master ports and signals/registers   
	.alarma(alarma),
	.clk1(clk1),
	.clk2(clk2),
	.enable(enable),
	.rojo(rojo),
	.talfin(talfin),
	.verde(verde)
);

// clk1
always
begin
	clk1 = 1'b0;
	clk1 = #10000 1'b1;
	#10000;
end 

// clk2
always
begin
	clk2 = 1'b0;
	clk2 = #5000 1'b1;
	#5000;
end 

// alarma
initial
begin
	alarma = 1'b0;
	alarma = #340000 1'b1;
	alarma = #310000 1'b0;
end 

// enable
initial
begin
	enable = 1'b0;
	enable = #140000 1'b1;
	enable = #150000 1'b0;
	enable = #110000 1'b1;
	enable = #140000 1'b0;
end 

Semaforo_vlg_sample_tst tb_sample (
	.alarma(alarma),
	.clk1(clk1),
	.clk2(clk2),
	.enable(enable),
	.sampler_tx(sampler)
);

Semaforo_vlg_check_tst tb_out(
	.rojo(rojo),
	.talfin(talfin),
	.verde(verde),
	.sampler_rx(sampler)
);
endmodule

