// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2024 16:16:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Peaje
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Peaje_vlg_sample_tst(
	Butt_inten,
	Butt_reset_manual,
	Butt_sema,
	Cat_ID,
	CLK,
	Sens_Back,
	Sens_Front,
	sampler_tx
);
input  Butt_inten;
input  Butt_reset_manual;
input  Butt_sema;
input [4:0] Cat_ID;
input  CLK;
input  Sens_Back;
input  Sens_Front;
output sampler_tx;

reg sample;
time current_time;
always @(Butt_inten or Butt_reset_manual or Butt_sema or Cat_ID or CLK or Sens_Back or Sens_Front)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Peaje_vlg_check_tst (
	Alarma,
	dinero,
	Sema_fin_rojo,
	Sema_fin_verde,
	Sema_ini_rojo,
	Sema_ini_verde,
	Tal_fin,
	Tal_ini,
	sampler_rx
);
input  Alarma;
input [4:0] dinero;
input  Sema_fin_rojo;
input  Sema_fin_verde;
input  Sema_ini_rojo;
input  Sema_ini_verde;
input  Tal_fin;
input  Tal_ini;
input sampler_rx;

reg  Alarma_expected;
reg [4:0] dinero_expected;
reg  Sema_fin_rojo_expected;
reg  Sema_fin_verde_expected;
reg  Sema_ini_rojo_expected;
reg  Sema_ini_verde_expected;
reg  Tal_fin_expected;
reg  Tal_ini_expected;

reg  Alarma_prev;
reg [4:0] dinero_prev;
reg  Sema_fin_rojo_prev;
reg  Sema_fin_verde_prev;
reg  Sema_ini_rojo_prev;
reg  Sema_ini_verde_prev;
reg  Tal_fin_prev;
reg  Tal_ini_prev;

reg  Alarma_expected_prev;
reg [4:0] dinero_expected_prev;
reg  Sema_fin_rojo_expected_prev;
reg  Sema_fin_verde_expected_prev;
reg  Sema_ini_rojo_expected_prev;
reg  Sema_ini_verde_expected_prev;
reg  Tal_fin_expected_prev;
reg  Tal_ini_expected_prev;

reg  last_Alarma_exp;
reg [4:0] last_dinero_exp;
reg  last_Sema_fin_rojo_exp;
reg  last_Sema_fin_verde_exp;
reg  last_Sema_ini_rojo_exp;
reg  last_Sema_ini_verde_exp;
reg  last_Tal_fin_exp;
reg  last_Tal_ini_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	Alarma_prev = Alarma;
	dinero_prev = dinero;
	Sema_fin_rojo_prev = Sema_fin_rojo;
	Sema_fin_verde_prev = Sema_fin_verde;
	Sema_ini_rojo_prev = Sema_ini_rojo;
	Sema_ini_verde_prev = Sema_ini_verde;
	Tal_fin_prev = Tal_fin;
	Tal_ini_prev = Tal_ini;
end

// update expected /o prevs

always @(trigger)
begin
	Alarma_expected_prev = Alarma_expected;
	dinero_expected_prev = dinero_expected;
	Sema_fin_rojo_expected_prev = Sema_fin_rojo_expected;
	Sema_fin_verde_expected_prev = Sema_fin_verde_expected;
	Sema_ini_rojo_expected_prev = Sema_ini_rojo_expected;
	Sema_ini_verde_expected_prev = Sema_ini_verde_expected;
	Tal_fin_expected_prev = Tal_fin_expected;
	Tal_ini_expected_prev = Tal_ini_expected;
end



// expected Alarma
initial
begin
	Alarma_expected = 1'bX;
end 
// expected dinero[ 4 ]
initial
begin
	dinero_expected[4] = 1'bX;
end 
// expected dinero[ 3 ]
initial
begin
	dinero_expected[3] = 1'bX;
end 
// expected dinero[ 2 ]
initial
begin
	dinero_expected[2] = 1'bX;
end 
// expected dinero[ 1 ]
initial
begin
	dinero_expected[1] = 1'bX;
end 
// expected dinero[ 0 ]
initial
begin
	dinero_expected[0] = 1'bX;
end 

// expected Sema_fin_rojo
initial
begin
	Sema_fin_rojo_expected = 1'bX;
end 

// expected Sema_fin_verde
initial
begin
	Sema_fin_verde_expected = 1'bX;
end 

// expected Sema_ini_rojo
initial
begin
	Sema_ini_rojo_expected = 1'bX;
end 

// expected Sema_ini_verde
initial
begin
	Sema_ini_verde_expected = 1'bX;
end 

// expected Tal_fin
initial
begin
	Tal_fin_expected = 1'bX;
end 

// expected Tal_ini
initial
begin
	Tal_ini_expected = 1'bX;
end 
// generate trigger
always @(Alarma_expected or Alarma or dinero_expected or dinero or Sema_fin_rojo_expected or Sema_fin_rojo or Sema_fin_verde_expected or Sema_fin_verde or Sema_ini_rojo_expected or Sema_ini_rojo or Sema_ini_verde_expected or Sema_ini_verde or Tal_fin_expected or Tal_fin or Tal_ini_expected or Tal_ini)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Alarma = %b | expected dinero = %b | expected Sema_fin_rojo = %b | expected Sema_fin_verde = %b | expected Sema_ini_rojo = %b | expected Sema_ini_verde = %b | expected Tal_fin = %b | expected Tal_ini = %b | ",Alarma_expected_prev,dinero_expected_prev,Sema_fin_rojo_expected_prev,Sema_fin_verde_expected_prev,Sema_ini_rojo_expected_prev,Sema_ini_verde_expected_prev,Tal_fin_expected_prev,Tal_ini_expected_prev);
	$display("| real Alarma = %b | real dinero = %b | real Sema_fin_rojo = %b | real Sema_fin_verde = %b | real Sema_ini_rojo = %b | real Sema_ini_verde = %b | real Tal_fin = %b | real Tal_ini = %b | ",Alarma_prev,dinero_prev,Sema_fin_rojo_prev,Sema_fin_verde_prev,Sema_ini_rojo_prev,Sema_ini_verde_prev,Tal_fin_prev,Tal_ini_prev);
`endif
	if (
		( Alarma_expected_prev !== 1'bx ) && ( Alarma_prev !== Alarma_expected_prev )
		&& ((Alarma_expected_prev !== last_Alarma_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Alarma :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Alarma_expected_prev);
		$display ("     Real value = %b", Alarma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Alarma_exp = Alarma_expected_prev;
	end
	if (
		( dinero_expected_prev[0] !== 1'bx ) && ( dinero_prev[0] !== dinero_expected_prev[0] )
		&& ((dinero_expected_prev[0] !== last_dinero_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dinero[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dinero_expected_prev);
		$display ("     Real value = %b", dinero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dinero_exp[0] = dinero_expected_prev[0];
	end
	if (
		( dinero_expected_prev[1] !== 1'bx ) && ( dinero_prev[1] !== dinero_expected_prev[1] )
		&& ((dinero_expected_prev[1] !== last_dinero_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dinero[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dinero_expected_prev);
		$display ("     Real value = %b", dinero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dinero_exp[1] = dinero_expected_prev[1];
	end
	if (
		( dinero_expected_prev[2] !== 1'bx ) && ( dinero_prev[2] !== dinero_expected_prev[2] )
		&& ((dinero_expected_prev[2] !== last_dinero_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dinero[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dinero_expected_prev);
		$display ("     Real value = %b", dinero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dinero_exp[2] = dinero_expected_prev[2];
	end
	if (
		( dinero_expected_prev[3] !== 1'bx ) && ( dinero_prev[3] !== dinero_expected_prev[3] )
		&& ((dinero_expected_prev[3] !== last_dinero_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dinero[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dinero_expected_prev);
		$display ("     Real value = %b", dinero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dinero_exp[3] = dinero_expected_prev[3];
	end
	if (
		( dinero_expected_prev[4] !== 1'bx ) && ( dinero_prev[4] !== dinero_expected_prev[4] )
		&& ((dinero_expected_prev[4] !== last_dinero_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dinero[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dinero_expected_prev);
		$display ("     Real value = %b", dinero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dinero_exp[4] = dinero_expected_prev[4];
	end
	if (
		( Sema_fin_rojo_expected_prev !== 1'bx ) && ( Sema_fin_rojo_prev !== Sema_fin_rojo_expected_prev )
		&& ((Sema_fin_rojo_expected_prev !== last_Sema_fin_rojo_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sema_fin_rojo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sema_fin_rojo_expected_prev);
		$display ("     Real value = %b", Sema_fin_rojo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Sema_fin_rojo_exp = Sema_fin_rojo_expected_prev;
	end
	if (
		( Sema_fin_verde_expected_prev !== 1'bx ) && ( Sema_fin_verde_prev !== Sema_fin_verde_expected_prev )
		&& ((Sema_fin_verde_expected_prev !== last_Sema_fin_verde_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sema_fin_verde :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sema_fin_verde_expected_prev);
		$display ("     Real value = %b", Sema_fin_verde_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sema_fin_verde_exp = Sema_fin_verde_expected_prev;
	end
	if (
		( Sema_ini_rojo_expected_prev !== 1'bx ) && ( Sema_ini_rojo_prev !== Sema_ini_rojo_expected_prev )
		&& ((Sema_ini_rojo_expected_prev !== last_Sema_ini_rojo_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sema_ini_rojo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sema_ini_rojo_expected_prev);
		$display ("     Real value = %b", Sema_ini_rojo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Sema_ini_rojo_exp = Sema_ini_rojo_expected_prev;
	end
	if (
		( Sema_ini_verde_expected_prev !== 1'bx ) && ( Sema_ini_verde_prev !== Sema_ini_verde_expected_prev )
		&& ((Sema_ini_verde_expected_prev !== last_Sema_ini_verde_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sema_ini_verde :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sema_ini_verde_expected_prev);
		$display ("     Real value = %b", Sema_ini_verde_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sema_ini_verde_exp = Sema_ini_verde_expected_prev;
	end
	if (
		( Tal_fin_expected_prev !== 1'bx ) && ( Tal_fin_prev !== Tal_fin_expected_prev )
		&& ((Tal_fin_expected_prev !== last_Tal_fin_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tal_fin :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tal_fin_expected_prev);
		$display ("     Real value = %b", Tal_fin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Tal_fin_exp = Tal_fin_expected_prev;
	end
	if (
		( Tal_ini_expected_prev !== 1'bx ) && ( Tal_ini_prev !== Tal_ini_expected_prev )
		&& ((Tal_ini_expected_prev !== last_Tal_ini_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tal_ini :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tal_ini_expected_prev);
		$display ("     Real value = %b", Tal_ini_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Tal_ini_exp = Tal_ini_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Peaje_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Butt_inten;
reg Butt_reset_manual;
reg Butt_sema;
reg [4:0] Cat_ID;
reg CLK;
reg Sens_Back;
reg Sens_Front;
// wires                                               
wire Alarma;
wire [4:0] dinero;
wire Sema_fin_rojo;
wire Sema_fin_verde;
wire Sema_ini_rojo;
wire Sema_ini_verde;
wire Tal_fin;
wire Tal_ini;

wire sampler;                             

// assign statements (if any)                          
Peaje i1 (
// port map - connection between master ports and signals/registers   
	.Alarma(Alarma),
	.Butt_inten(Butt_inten),
	.Butt_reset_manual(Butt_reset_manual),
	.Butt_sema(Butt_sema),
	.Cat_ID(Cat_ID),
	.CLK(CLK),
	.dinero(dinero),
	.Sema_fin_rojo(Sema_fin_rojo),
	.Sema_fin_verde(Sema_fin_verde),
	.Sema_ini_rojo(Sema_ini_rojo),
	.Sema_ini_verde(Sema_ini_verde),
	.Sens_Back(Sens_Back),
	.Sens_Front(Sens_Front),
	.Tal_fin(Tal_fin),
	.Tal_ini(Tal_ini)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #500 1'b1;
	#500;
end 

// Butt_reset_manual
initial
begin
	Butt_reset_manual = 1'b1;
end 

// Butt_sema
initial
begin
	Butt_sema = 1'b1;
	Butt_sema = #10000 1'b0;
	Butt_sema = #10000 1'b1;
end 

// Butt_inten
initial
begin
	Butt_inten = 1'b1;
	Butt_inten = #60000 1'b0;
	Butt_inten = #10000 1'b1;
end 

// Sens_Front
initial
begin
	Sens_Front = 1'b0;
	Sens_Front = #50000 1'b1;
	Sens_Front = #110000 1'b0;
end 

// Sens_Back
initial
begin
	Sens_Back = 1'b0;
	Sens_Back = #250000 1'b1;
	Sens_Back = #100000 1'b0;
end 
// Cat_ID[ 4 ]
initial
begin
	Cat_ID[4] = 1'b0;
end 
// Cat_ID[ 3 ]
initial
begin
	Cat_ID[3] = 1'b0;
end 
// Cat_ID[ 2 ]
initial
begin
	Cat_ID[2] = 1'b0;
end 
// Cat_ID[ 1 ]
initial
begin
	Cat_ID[1] = 1'b0;
end 
// Cat_ID[ 0 ]
initial
begin
	Cat_ID[0] = 1'b1;
end 

Peaje_vlg_sample_tst tb_sample (
	.Butt_inten(Butt_inten),
	.Butt_reset_manual(Butt_reset_manual),
	.Butt_sema(Butt_sema),
	.Cat_ID(Cat_ID),
	.CLK(CLK),
	.Sens_Back(Sens_Back),
	.Sens_Front(Sens_Front),
	.sampler_tx(sampler)
);

Peaje_vlg_check_tst tb_out(
	.Alarma(Alarma),
	.dinero(dinero),
	.Sema_fin_rojo(Sema_fin_rojo),
	.Sema_fin_verde(Sema_fin_verde),
	.Sema_ini_rojo(Sema_ini_rojo),
	.Sema_ini_verde(Sema_ini_verde),
	.Tal_fin(Tal_fin),
	.Tal_ini(Tal_ini),
	.sampler_rx(sampler)
);
endmodule

