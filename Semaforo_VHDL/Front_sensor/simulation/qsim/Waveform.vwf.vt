// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2024 12:07:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Front_sensor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Front_sensor_vlg_sample_tst(
	b,
	Button,
	Reset,
	Sens,
	sampler_tx
);
input [4:0] b;
input  Button;
input  Reset;
input  Sens;
output sampler_tx;

reg sample;
time current_time;
always @(b or Button or Reset or Sens)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Front_sensor_vlg_check_tst (
	alarma,
	cont_vehiculo,
	dinero,
	EN_salida,
	Senal_cerrado,
	sampler_rx
);
input  alarma;
input  cont_vehiculo;
input [4:0] dinero;
input  EN_salida;
input  Senal_cerrado;
input sampler_rx;

reg  alarma_expected;
reg  cont_vehiculo_expected;
reg [4:0] dinero_expected;
reg  EN_salida_expected;
reg  Senal_cerrado_expected;

reg  alarma_prev;
reg  cont_vehiculo_prev;
reg [4:0] dinero_prev;
reg  EN_salida_prev;
reg  Senal_cerrado_prev;

reg  alarma_expected_prev;
reg  cont_vehiculo_expected_prev;
reg [4:0] dinero_expected_prev;
reg  EN_salida_expected_prev;
reg  Senal_cerrado_expected_prev;

reg  last_alarma_exp;
reg  last_cont_vehiculo_exp;
reg [4:0] last_dinero_exp;
reg  last_EN_salida_exp;
reg  last_Senal_cerrado_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	alarma_prev = alarma;
	cont_vehiculo_prev = cont_vehiculo;
	dinero_prev = dinero;
	EN_salida_prev = EN_salida;
	Senal_cerrado_prev = Senal_cerrado;
end

// update expected /o prevs

always @(trigger)
begin
	alarma_expected_prev = alarma_expected;
	cont_vehiculo_expected_prev = cont_vehiculo_expected;
	dinero_expected_prev = dinero_expected;
	EN_salida_expected_prev = EN_salida_expected;
	Senal_cerrado_expected_prev = Senal_cerrado_expected;
end



// expected alarma
initial
begin
	alarma_expected = 1'bX;
end 

// expected cont_vehiculo
initial
begin
	cont_vehiculo_expected = 1'bX;
end 
// expected dinero[ 4 ]
initial
begin
	dinero_expected[4] = 1'bX;
end 
// expected dinero[ 3 ]
initial
begin
	dinero_expected[3] = 1'bX;
end 
// expected dinero[ 2 ]
initial
begin
	dinero_expected[2] = 1'bX;
end 
// expected dinero[ 1 ]
initial
begin
	dinero_expected[1] = 1'bX;
end 
// expected dinero[ 0 ]
initial
begin
	dinero_expected[0] = 1'bX;
end 

// expected EN_salida
initial
begin
	EN_salida_expected = 1'bX;
end 

// expected Senal_cerrado
initial
begin
	Senal_cerrado_expected = 1'bX;
end 
// generate trigger
always @(alarma_expected or alarma or cont_vehiculo_expected or cont_vehiculo or dinero_expected or dinero or EN_salida_expected or EN_salida or Senal_cerrado_expected or Senal_cerrado)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alarma = %b | expected cont_vehiculo = %b | expected dinero = %b | expected EN_salida = %b | expected Senal_cerrado = %b | ",alarma_expected_prev,cont_vehiculo_expected_prev,dinero_expected_prev,EN_salida_expected_prev,Senal_cerrado_expected_prev);
	$display("| real alarma = %b | real cont_vehiculo = %b | real dinero = %b | real EN_salida = %b | real Senal_cerrado = %b | ",alarma_prev,cont_vehiculo_prev,dinero_prev,EN_salida_prev,Senal_cerrado_prev);
`endif
	if (
		( alarma_expected_prev !== 1'bx ) && ( alarma_prev !== alarma_expected_prev )
		&& ((alarma_expected_prev !== last_alarma_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alarma :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alarma_expected_prev);
		$display ("     Real value = %b", alarma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alarma_exp = alarma_expected_prev;
	end
	if (
		( cont_vehiculo_expected_prev !== 1'bx ) && ( cont_vehiculo_prev !== cont_vehiculo_expected_prev )
		&& ((cont_vehiculo_expected_prev !== last_cont_vehiculo_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_vehiculo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_vehiculo_expected_prev);
		$display ("     Real value = %b", cont_vehiculo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cont_vehiculo_exp = cont_vehiculo_expected_prev;
	end
	if (
		( dinero_expected_prev[0] !== 1'bx ) && ( dinero_prev[0] !== dinero_expected_prev[0] )
		&& ((dinero_expected_prev[0] !== last_dinero_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dinero[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dinero_expected_prev);
		$display ("     Real value = %b", dinero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dinero_exp[0] = dinero_expected_prev[0];
	end
	if (
		( dinero_expected_prev[1] !== 1'bx ) && ( dinero_prev[1] !== dinero_expected_prev[1] )
		&& ((dinero_expected_prev[1] !== last_dinero_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dinero[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dinero_expected_prev);
		$display ("     Real value = %b", dinero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dinero_exp[1] = dinero_expected_prev[1];
	end
	if (
		( dinero_expected_prev[2] !== 1'bx ) && ( dinero_prev[2] !== dinero_expected_prev[2] )
		&& ((dinero_expected_prev[2] !== last_dinero_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dinero[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dinero_expected_prev);
		$display ("     Real value = %b", dinero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dinero_exp[2] = dinero_expected_prev[2];
	end
	if (
		( dinero_expected_prev[3] !== 1'bx ) && ( dinero_prev[3] !== dinero_expected_prev[3] )
		&& ((dinero_expected_prev[3] !== last_dinero_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dinero[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dinero_expected_prev);
		$display ("     Real value = %b", dinero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dinero_exp[3] = dinero_expected_prev[3];
	end
	if (
		( dinero_expected_prev[4] !== 1'bx ) && ( dinero_prev[4] !== dinero_expected_prev[4] )
		&& ((dinero_expected_prev[4] !== last_dinero_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dinero[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dinero_expected_prev);
		$display ("     Real value = %b", dinero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dinero_exp[4] = dinero_expected_prev[4];
	end
	if (
		( EN_salida_expected_prev !== 1'bx ) && ( EN_salida_prev !== EN_salida_expected_prev )
		&& ((EN_salida_expected_prev !== last_EN_salida_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EN_salida :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EN_salida_expected_prev);
		$display ("     Real value = %b", EN_salida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EN_salida_exp = EN_salida_expected_prev;
	end
	if (
		( Senal_cerrado_expected_prev !== 1'bx ) && ( Senal_cerrado_prev !== Senal_cerrado_expected_prev )
		&& ((Senal_cerrado_expected_prev !== last_Senal_cerrado_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Senal_cerrado :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Senal_cerrado_expected_prev);
		$display ("     Real value = %b", Senal_cerrado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Senal_cerrado_exp = Senal_cerrado_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Front_sensor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] b;
reg Button;
reg Reset;
reg Sens;
// wires                                               
wire alarma;
wire cont_vehiculo;
wire [4:0] dinero;
wire EN_salida;
wire Senal_cerrado;

wire sampler;                             

// assign statements (if any)                          
Front_sensor i1 (
// port map - connection between master ports and signals/registers   
	.alarma(alarma),
	.b(b),
	.Button(Button),
	.cont_vehiculo(cont_vehiculo),
	.dinero(dinero),
	.EN_salida(EN_salida),
	.Reset(Reset),
	.Senal_cerrado(Senal_cerrado),
	.Sens(Sens)
);
// b[ 4 ]
initial
begin
	b[4] = 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
end 

// Button
initial
begin
	Button = 1'b1;
	Button = #80000 1'b0;
	Button = #10000 1'b1;
end 

// Reset
initial
begin
	Reset = 1'b1;
	Reset = #180000 1'b0;
	Reset = #10000 1'b1;
end 

// Sens
initial
begin
	Sens = 1'b0;
	Sens = #70000 1'b1;
	Sens = #90000 1'b0;
end 

Front_sensor_vlg_sample_tst tb_sample (
	.b(b),
	.Button(Button),
	.Reset(Reset),
	.Sens(Sens),
	.sampler_tx(sampler)
);

Front_sensor_vlg_check_tst tb_out(
	.alarma(alarma),
	.cont_vehiculo(cont_vehiculo),
	.dinero(dinero),
	.EN_salida(EN_salida),
	.Senal_cerrado(Senal_cerrado),
	.sampler_rx(sampler)
);
endmodule

